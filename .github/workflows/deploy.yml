#
name: Deploy

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  workflow_run:
    workflows: ["Build"]
  workflow_dispatch:

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: chess-api
  REPO_NAME: kevintsander-org
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  USER_ASSIGNED_IDENTITY_NAME: mi-sander-shared-dev-01
  CONTAINER_APP_NAME: cntapp-sander-chess-dev-03
  CONTAINER_APP_ENV_NAME: cntenv-sander-chess-01
  CONTAINER_APP_CONFIG_PATH: ./.github/config/container-app.config.yml
  CONTAINER_APP_PORT: 3000
  CHESS_RESOURCE_GROUP_NAME: rg-sander-chess-dev-01
  SHARED_RESOURCE_GROUP_NAME: rg-sander-shared-dev-01
  KEYVAULT_NAME: kv-sander-shared-dev-05
  SQL_DB_NAME: chess-dev-01
  SQL_HOST: sqlsrv-sander-shared-dev-03.database.windows.net
  SQL_PORT: 1433
  SQL_USERNAME: "sanderkt"
  SQL_PASSWORD_SECRET_NAME: chess-sql-server-admin-password
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: .

      - name: Read build artifact
        id: read_build_artifact
        run: |
          imageDigest=$(cat build_artifact.txt | grep imageDigest | cut -d '=' -f 2)
          echo "::set-output name=imageDigest::$imageDigest"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create/Update Container App Secret
        run: |
          az containerapp secret set \
            -n ${{ env.CONTAINER_APP_NAME }} \
            -g ${{ env.CHESS_RESOURCE_GROUP_NAME }} \
            -s ${{ env.SQL_PASSWORD_SECRET_NAME }}=keyvaultref:https://${{ env.KEYVAULT_NAME }}.vault.azure.net/secrets/${{ env.SQL_PASSWORD_SECRET_NAME }},identityref:/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.SHARED_RESOURCE_GROUP_NAME }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${{ env.USER_ASSIGNED_IDENTITY_NAME }}

      - name: Deploy to Azure Container Apps
        run: |
          az containerapp up \
            -n ${{ env.CONTAINER_APP_NAME }} \
            -g ${{ env.CHESS_RESOURCE_GROUP_NAME }} \
            -i ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}@${{ steps.read_build_artifact.outputs.imageDigest }} \
            --registry-server ${{ env.REGISTRY }} \
            --registry-username ${{ github.actor }} \
            --registry-password ${{ secrets.GHCR_TOKEN }} \
            --env-vars \
            CHESS_SQL_DB_NAME=${{ env.SQL_DB_NAME }} \
            CHESS_SQL_HOST=${{ env.SQL_HOST }} \
            CHESS_SQL_PORT=${{ env.SQL_PORT }} \
            CHESS_SQL_USERNAME=${{ env.SQL_USERNAME }} \
            CHESS_SQL_PASSWORD=secretref:${{ env.SQL_PASSWORD_SECRET_NAME }} \
            CHESS_SQL_AZURE=true \
            RAILS_ENV=development \
            --target-port ${{ env.CONTAINER_APP_PORT }}

      - name: Create/Update Rails Database
        run: |
          script -q -c 'az containerapp exec \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.CHESS_RESOURCE_GROUP_NAME }} \
            --command "rails db:prepare"'
        # --command "bash -c 'for i in {1..5}; do rails db:prepare && break || sleep 10; done'"' if we want retries?

      # this is the more direct way of doing this but currently gives a known error
      # - name: Create/Update Rails Database
      #   run: |
      #     az containerapp exec \
      #       --name ${{ env.CONTAINER_APP_NAME }} \
      #       --resource-group ${{ env.CHESS_RESOURCE_GROUP_NAME }} \
      #       --command "rails db:prepare"
